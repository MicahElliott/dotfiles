#compdef clj

# local curcontext="$curcontext" state line ret=1
typeset -A opt_args

_clj_aliases() {
    _values \
        ALIASES \
        aaa \
        bbb
}

local line

to_aliases() {
    # print 'getting aliases'
    local arr=()
    arr+=($(jet --to json <deps.edn  |jq -rc '.aliases | keys' |gsed -E  -e 's/[]["]//g' -e 's/,/ /g'))
    jet --to json <deps.edn  |jq -rc '.aliases | keys' |gsed -E  -e 's/[]["]//g' -e 's/,/ /g'
    # print "( $arr )"
}

_arguments -C \
           '(-h -? --help)'{-h,-\?,--help}'[Show help information]' \
           '-''[Run a script from stdin]' \
           '(-Spath)'-Spath'[Compute classpath and echo to stdout only]' \
           '(-Srepro)'-Srepro'[Ignore the ~/.clojure/deps.edn config file]' \
           '(-Sforce)'-Sforce'[Force recomputation of the classpath (donâ€™t use the cache)]' \
           '(-Sresolve-tags)'-Sresolve-tags'[Resolve git coordinate tags to shas and update deps.edn]' \
           '(-Spom)'-Spom'[Generate (or update existing) pom.xml with deps and paths]' \
           '(-Stree)'-Stree'[Print dependency tree]' \
           '(-Sverbose)'-Sverbose'[Print important path info to console]' \
           '(-Sdescribe)'-Sdescribe'[Print environment and command parsing info as data]' \
           '(-Strace)'-Strace'[Write a trace.edn file that traces deps expansion]' \
           '(-r --repl)'{-r,--repl}'[Run a repl]' \
           '-O[Concatenated jvm option aliases, ex: -O:mem]:aliases:->aliases' \
           '-R[Concatenated resolve-deps aliases, ex: -R:bench:1.9]:aliases:->aliases' \
           '-C[Concatenated make-classpath aliases, ex: -C:dev]:aliases:->aliases' \
           '-M[Concatenated main option aliases, ex: -M:test]:aliases:->aliases' \
           '-A[Concatenated aliases of any kind, ex: -A:dev:mem]:aliases:->aliases' \
           '-Sdeps EDN[Deps data to use as the last deps file to be merged]' \
           '-Scp CP[Do NOT compute or cache classpath, use this one instead]' \
           '*:foo or bar:_files' && ret=0

case "$state" in
    (aliases)
        local als
        als=( $(jet --to json <deps.edn  |jq -rc '.aliases | keys' |gsed -E  -e 's/[]["]//g' -e 's/,/ /g') )
        _describe -t aliases 'alias' als ;;
esac

return ret


           # '-O[Concatenated jvm option aliases, ex: -O:mem]:aliases:(foo bar)'


    # # '-Jopt''Pass opt through in java_opts, ex: -J-Xmx512m' \


# -i, --init path     [Load a file or resource]
# -e, --eval string   [Eval exprs in string; print non-nil values]
# --report target     [Report uncaught exception to "file" (default), "stderr", or "none", overrides System property clojure.main.report]
# -m, --main ns-name  [Call the -main function from namespace w/args]
# #path                [Run a script from a file or resource]

# # Java options
# java_opts=\
# '-Xmixed           [mixed mode execution (default)]' \
# '-Xint             [interpreted mode execution only]' \
# '-Xbootclasspath:<[directories and zip/jar files separated by :>, set search path for bootstrap classes and resources]' \
# '-Xbootclasspath/a:<[directories and zip/jar files separated by :>, append to end of bootstrap class path]' \
# '-Xbootclasspath/p:<[directories and zip/jar files separated by :>, prepend in front of bootstrap class path]' \
# '-Xdiag            [show additional diagnostic messages]' \
# '-Xnoclassgc       [disable class garbage collection]' \
# '-Xincgc           [enable incremental garbage collection]' \
# '-Xloggc:<file>    [log GC status to a file with time stamps' \
# '-Xbatch           [disable background compilation]' \
# '-Xms<size>        [set initial Java heap size' \
# '-Xmx<size>        [set maximum Java heap size' \
# '-Xss<size>        [set java thread stack size' \
# '-Xprof            [output cpu profiling data]' \
# '-Xfuture          [enable strictest checks, anticipating future default]' \
# '-Xrs              [reduce use of OS signals by Java/VM (see documentation)]' \
# '-Xcheck:jni       [perform additional checks for JNI functions]' \
# '-Xshare:off       [do not attempt to use shared class data]' \
# '-Xshare:auto      [use shared class data if possible (default)]' \
# '-Xshare:on        [require using shared class data, otherwise fail.]' \
# '-XshowSettings    [show all settings and continue]' \
# '-XshowSettings:all [show all settings and continue]' \
# '-XshowSettings:vm [show all vm related settings and continue]' \
# '-XshowSettings:properties [show all property settings and continue]' \
# '-XshowSettings:locale [show all locale related settings and continue]'

# Local Variables:
# mode: sh
# End:
