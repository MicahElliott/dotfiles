"-----------------------------------------------------------------------
" .vimrc
" Maintainer:  Micah Elliott
" Version:     0.3
" Info:        Micah’s main config file
"-----------------------------------------------------------------------
let g:textobj#quote#matchit = 1

"== Options {{{
set t_Co=256
syntax on                    " colored syntax

set exrc          " use local .exrc file
set autowrite     " autosave before changing window or shellcmd
set noignorecase  " search case sensitive
"set tabstop=2     " tab 4 chars (ts)
"set tabstop=40     " tab 4 chars (ts)
set tabstop=4     " tab 4 chars (ts)
set shiftwidth=2  " autoindent to 4 chars
set expandtab
set nobackup
set bs=2          " allow backspacing in insert mode
set nocompatible  " not compatible with vi
set history=300    " keeps command history
set ruler         " show cursor position always
set showmode
set showcmd
set showmatch     " match parens, brackets in insert mode
set hlsearch      " search pattern highlighting
set mousehide     " hide mouse pointer while typing
set errorbells    " turn on bells
set visualbell    " some kind of visual bell warning
set modeline      " enable .exrc cmds inside file being edited
set modelines=5   " number of lines at top to be checked
set formatoptions=tcqron
                  " only tcq are default but others important! (:h fo-table)
set nocursorline
set nocursorcolumn
set hidden
set autoindent    " Mimic previous line
set incsearch     " Show found string as it's being typed
set nojoinspaces    " I prefer that *one* space is inserted upon `join' (j)
set nolinebreak   " Wrap long lines (breakat) -- do not insert <EOL>s
                  "   only affects the way the file is displayed
set nosmartindent " Too smart for text
set nosmarttab    " Too smart for text
"set textwidth=78  " Insert <EOL> when reaching this column
set textwidth=0  " Insert <EOL> when reaching this column
set wrap          " Display long lines wrapped
set wrapmargin=0  " Like `textwidth' but use instead (from right border)
set suffixes=.bak,~,.o,.info,.swp,.swp,.pc,.pcl,.aux,.dvi,.log,.toc
set hidden
set nrformats-=octal  " Enable in/decrementing with ^A/^X with leading 0s

set dir=$TMPDIR/vimbak

set lazyredraw    " Don't redraw while executing macros (better performance)
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Probably not required
set shell=/usr/bin/zsh

" Swap file are good for knowing if a file is open elsewhere.
"set noswapfile

" Cool, but messes up urxvt copying (extra trailing spaces)
"set colorcolumn=80

" From Damian Conway OSCON
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" Neat idea, but harder to turn off, and probably performs badly.
set relativenumber  " cor
set numberwidth=1
set number
"set numberwidth=3

" Always show a status bar
set laststatus=2
"set statusline=%-10.3n  " buffer number
"set cmdheight=2  " for more debug info?

" Always show help in vertical window
"cnoremap h vert help

" Enable mouse-clicking/viz-highlighting, but mouse-copy only in insert mode.
" Disabling since painful to have to go to insert mode to mouse-select. IOW,
" mouse selection won't work unless `mouse=` (nothing).
"set mouse=n
set mouse=

" http://vim.1045645.n5.nabble.com/Search-within-results-from-More-prompt-td5710213.html
set wildmenu
set wildmode=longest:full,full

" Get out of insert-mode without (perceived) delay
" http://ksjoberg.com/vim-esckeys.html
set noesckeys

set cryptmethod=blowfish2

" Folding
set foldenable
set foldmethod=marker
"set foldmethod=syntax

set switchbuf=split

" Set very-'magic' permanently (no need to specify \v in pattern)
" http://stackoverflow.com/questions/3760444/in-vim-is-there-a-way-to-set-very-magic-permanently-and-globally
"cnoremap s/ s/\v

" Swap : and ;
" Pretty bad since renders all :foo commands broken
" Better to just use xmodmap in .xinitrc
"nnoremap ; :
"nnoremap : ;

" Seems these all need to be in vimrc due to order of vimclojure.
let vimfiles = $HOME . "/.vim"
"let vimclojure#SetupKeyMap = 0
let vimfiles = $HOME . "/.vim"
let vimclojure#HighlightBuiltins = 1      " Highlight Clojure's builtins
let vimclojure#ParenRainbow = 1           " Rainbow parentheses!
let vimclojure#SplitSize = 10
let vimclojure#SplitPos = "bottom"
let vimclojureRoot = vimfiles."/bundle/VimClojure"
let vimclojure#HighlightContrib = 1
let vimclojure#DynamicHighlighting = 1
let vimclojure#FuzzyIndent = 1
"let vimclojure#WantNailgun = 1
"let vimclojure#NailgunClient = vimclojureRoot."/lib/nailgun/ng"
" Java? http://blog.darevay.com/2010/10/how-i-tamed-vimclojure/

" Indent guides: https://github.com/nathanaelkane/vim-indent-guides
" <Leader>ig
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236
let g:indent_guides_enable_on_vim_startup = 0  " turn on here
" disable ,ig
let g:indent_guides_default_mapping = 0

"hi IndentGuidesOdd ctermbg=red
"hi IndentGuidesEven ctermbg=blue
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=233
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234

let mapleader = ","
let maplocalleader = ","
                  " ignore command-line completion
"set term=linux   " override shell's setting--should work everywhere
"set tags=$VIMTAGS
set tags=./tags,./TAGS,tags,TAGS,./tmp/tags,../tags

""" Cursor

set guicursor=a:blinkwait0,a:block-cursor

" Mitigate annoying delay on Esc:
" http://superuser.com/questions/246540/vim-delay-when-exiting-visual-mode
"set timeoutlen=600 " ms
"set ttimeoutlen=0
set timeoutlen=6000 " ms
set ttimeoutlen=5000

" http://vim.wikia.com/wiki/Configuring_the_cursor
" Tmux details: http://reza.jelveh.me/2011/09/18/zsh-tmux-vi-mode-cursor
if &term =~ "xterm\\|rxvt"
  " Insert
  let &t_SI  = "\<Esc>]12;gray\x7"
  let &t_SI .= "\<Esc>[3 q"
  " Normal
  let &t_EI  = "\<Esc>]12;green\x7"
  let &t_EI .= "\<Esc>[2 q"
  autocmd VimLeave * silent !echo -ne "\033]112\007"
elseif &term =~ "screen-it"
  " Insert
  let &t_SI  = "\<Esc>Ptmux;\<Esc>\<Esc>]12;gray\x7\<Esc>\\"
  let &t_SI .= "\<Esc>Ptmux;\<Esc>\<Esc>[3 q\<Esc>\\"
  " Normal
  let &t_EI  = "\<Esc>Ptmux;\<Esc>\<Esc>]12;cyan\x7\<Esc>\\"
  let &t_EI .= "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
  "autocmd VimLeave * silent !echo -ne "\033Ptmux;\033\033]112\007\<Esc>\\"
  autocmd VimLeave * silent !printf "\033Ptmux;\033\033]12;grey\007\033\\"
endif

" Consider optimizing for tmux:
" http://sourceforge.net/p/tmux/mailman/tmux-users/thread/20120726171450.GB21474@s70206.gridserver.com/

setlocal spell spelllang=en_us
set nospell
set spellfile=~/.vim/en.utf-8.add


" }}}

"== GUI (instead of having a gvimrc) {{{
"set guifont=Monospace\ 6
set guifont=ProFontWindows\ 9
"set guifont=mde
set guioptions=acegi
" }}}





runtime! macros/matchit.vim

"== Vundle {{{
"filetype off
""call pathogen#runtime_append_all_bundles()
"call pathogen#infect('~/gitcontainer/vim')
"" For testing my hacks.
""call pathogen#runtime_prepend_subdirectories('~/gitcontainer/forks')
"filetype plugin indent on

filetype off  " required for vundle!
set rtp+=~/.vim/bundle/Vundle.vim
"call vundle#rc()
call vundle#begin()

" let Vundle manage Vundle; required!
Plugin 'gmarik/Vundle.vim'

"Bundle 'tyok/ack.vim.git'
Plugin 'rking/ag.vim'
Plugin 'kien/ctrlp.vim'
"Bundle 'tpope/vim-cucumber.git'
Plugin 'tpope/vim-haml.git'
Plugin 'trapd00r/irc.vim.git'
Plugin 'tpope/vim-markdown.git'
Plugin 'juvenn/mustache.vim.git'
"Bundle 'Shougo/neocomplcache.git'
"Bundle 'scrooloose/nerdcommenter.git'
Plugin 'tpope/vim-commentary.git'
Plugin 'scrooloose/nerdtree.git'
"Bundle 'tpope/vim-pathogen.git'
Plugin 'tpope/vim-rails'
Plugin 'kien/rainbow_parentheses.vim'
"Plugin 'losingkeys/vim-niji'
Plugin 'tpope/vim-repeat.git'
"Bundle 'vim-scripts/rubycomplete.vim'
Plugin 'vim-ruby/vim-ruby.git'
Plugin 'ervandew/screen'
Plugin 'slim-template/vim-slim.git'
" Kills some of the completion features, like C-p
"Bundle 'ervandew/supertab.git'
Plugin 'tpope/vim-surround.git'
Plugin 'scrooloose/syntastic.git'
"Bundle 'vim-scripts/taglist.vim.git'

"Bundle 'msanders/snipmate.vim.git'
" These two required for snipmate
Plugin 'tomtom/tlib_vim.git'
Plugin 'MarcWeber/vim-addon-mw-utils.git'

Plugin 'vim-scripts/transpose-words.git'
Plugin 'tpope/vim-unimpaired.git'
Plugin 'jeetsukumaran/vim-buffergator.git'

"Bundle 'vim-scripts/VimClojure.git'
Plugin 'guns/vim-clojure-static.git'
Plugin 'guns/vim-clojure-highlight.git'
Plugin 'tpope/vim-leiningen.git'
"Bundle 'tpope/vim-classpath'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-scriptease'

Plugin 'tpope/vim-projectionist.git'
Plugin 'tpope/vim-dispatch.git'
Plugin 'tpope/vim-fireplace.git'
Plugin 'guns/vim-sexp'
Plugin 'tpope/vim-sexp-mappings-for-regular-people'
Plugin 'dgrnbrg/vim-redl'

Plugin 'file:///home/mde/gitcontainer/projects/vim-racket-omni-docs'

Plugin 'wlangstroth/vim-racket'
"nunmap <buffer> K  " does not work

Plugin 'henrik/vim-indexed-search.git'
Plugin 'vim-scripts/vim-json-bundle.git'
"Bundle 'tpope/vim-liquid.git'  " jekyll??
Plugin 'jpalardy/vim-slime.git'
" Visual block editing (mirror):
" http://vim.wikia.com/wiki/Applying_substitutes_to_a_visual_block
Plugin 'taku-o/vim-vis'
Plugin 'vim-scripts/AnsiEsc.vim.git'
Plugin 'nono/vim-handlebars.git'
Plugin 'groenewege/vim-less'

Plugin 'bling/vim-airline'
"Bundle 'itchyny/lightline.vim'

Plugin 'tmhedberg/matchit'
Plugin 'kana/vim-textobj-user'
Plugin 'reedes/vim-textobj-quote'

" Not doing JavaScript/jade/node for a while.
"Bundle 'johnhamelink/blade.vim'
"Bundle 'digitaltoad/vim-jade'
"Bundle 'kchmck/vim-coffee-script.git'
"Bundle 'gkz/vim-ls.git'
"Bundle 'jelera/vim-javascript-syntax'
"Bundle 'claco/jasmine.vim.git'


"Bundle 'vim-scripts/Color-Sampler-Pack'
"Bundle 'sjl/badwolf.git'
"Bundle 'nanotech/jellybeans.vim.git'
"Bundle 'altercation/vim-colors-solarized'
"Bundle 'jpo/vim-railscasts-theme.git'
"Bundle 'morhetz/gruvbox'
"Bundle 'zeis/vim-kolor'
"Bundle 'chriskempson/tomorrow-theme'
"Bundle 'dsolstad/vim-wombat256i'
"Bundle 'sickill/vim-monokai.git'
Plugin 'tomasr/molokai.git'

" Disable for vimdeck
Plugin 'nathanaelkane/vim-indent-guides.git'

" Chuck syntax
"Bundle 'vim-scripts/ck.vim'

" FIXME: Might not want autoclose
"Bundle 'Townk/vim-autoclose'

" Too complex to setup, maybe
"Bundle 'Shougo/neocomplete.vim'

Plugin 'godlygeek/tabular.git'

Plugin 'nelstrom/vim-markdown-folding'

"Bundle 'chrisbra/csv.vim'

" Just trying to get a feel for cli in vim
Plugin 'tpope/vim-fugitive'

Plugin 'vim-scripts/Vim-R-plugin'

Plugin 'thinca/vim-ref'


" Create symlink to enable local dev
" ln -s gitcontainer/projects/vim-cterm-highlight ~/.vim/bundle/
Plugin 'file:///home/mde/gitcontainer/projects/Rocannon'
" Only enable when working on colorschemes
"Plugin 'file:///home/mde/gitcontainer/projects/vim-cterm-highlight'

Plugin 'file:///home/mde/gitcontainer/projects/upper-decker'

Plugin 'MicahElliott/vim-clojure-fontlocks'

"-- Gists ------------------------------------------------------------
"Bundle 'git@github.com:MicahElliott/snipmate-snippets.git'
"Bundle 'git@github.com:MicahElliott/UniCycle.git'
" Automagic Clojure folding on defns and defmacros
"Bundle 'git@gist.github.com:3049202.git'
" also: MicahElliott/vim-colors-mde
"Bundle '~/gitcontainer/vim/vim-colors-mde'
Plugin 'file:///home/mde/gitcontainer/vim/vim-colors-mde'
" Vim “adobe” color scheme (out of date)
" THIS ONE WAS GOOD
"Bundle 'git@gist.github.com:720355.git'
" Special comments support to v3.0.6 for vim python syntax.
"Bundle 'git@gist.github.com:735852.git'

call vundle#end()
filetype plugin indent on     " required!
" }}}

"== Color Schemes {{{
set background=dark
" Listed in order of preference.
"colorscheme adobe
"colorscheme herald
"colorscheme inkpot
" No effect for cterm
"let g:molokai_original = 1
"let g:rehash256 = 1
" Something bad happens to airline when re-source-ing $MYVIMRC
colorscheme molokai
"let g:colors_name = 'mde disabling colors_name here since its funky with airline/mol combo'
unlet g:colors_name
"colorscheme Tomorrow-Night
"colorscheme badwolf
"colorscheme jellybeans

"colorscheme gruvbox
"colorscheme kolor
"colorscheme tomorrow
"colorscheme wombat256i

"colorscheme railscasts
"colorscheme vibrantink
"colorscheme vividchalk
"colorscheme desert256
"colorscheme motus
"set background=light
"let g:solarized_termcolors=256
"let g:solarized_contrast="high"
"colorscheme solarized
" FIXME
" Has some molokai overrides to remove bad recording red
colorscheme comments
colorscheme missing
colorscheme overrides

" Has no effect.
"source ~/.vim/ftplugin/comments.vim
"source ~/config/vim/bundle/git@gist.github.com:720355/syntax/comments.vim

" Catching bad whitespace.
"hi ExtraWhitespace ctermbg=9 guibg=red
match ExtraWhitespace /\s\+$/
" }}}

" TODO:
" - Set up real tabl completion, instead of C-Space

"== ftplugins ~/.vim/ftplugin {{{
" This vimrc runs before the ftplugins.
" See individual files with: <C-w>f
" Particularly interesting:
" ~/.vim/ftplugin/ruby.vim
" ~/.vim/ftplugin/clojure.vim
" ~/.vim/ftplugin/python/mde.vim
" ~/.vim/ftplugin/bash.vim
" ~/.vim/ftplugin/coffee.vim
" ~/.vim/ftplugin/cpp.vim
" ~/.vim/ftplugin/css.vim
" ~/.vim/ftplugin/c.vim
" ~/.vim/ftplugin/mail.vim
" ~/.vim/ftplugin/make.vim
" ~/.vim/ftplugin/markdown.vim
" ~/.vim/ftplugin/python
" ~/.vim/ftplugin/r/r-mde.vim
" ~/.vim/ftplugin/ruby.vim
" ~/.vim/ftplugin/sass.vim
" ~/.vim/ftplugin/sh.vim
" ~/.vim/ftplugin/text.vim
" ~/.vim/ftplugin/zsh.vim
" }}}

"== Override settings {{{

" Airline Theme
" https://github.com/bling/vim-airline/wiki/Screenshots
let g:airline_theme = 'light'  " or sol, light, dark, molokai

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:ctermhi_discard_rare = 1

"let b:commentary_format = '"%s'

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline#extensions#syntastic#enabled = 1

let g:rocannon_bounce_mappings = 1

let g:snippets_dir = '~/.vim/snippets'
"inoremap <C-j> <C-r>=TriggerSnippet()<CR>
"snoremap <C-j> <Esc>i<Right><C-r>=TriggerSnippet()<CR>

" Ruby: :h ft-ruby-omni
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1

" See: ~/.vim/plugin/mdeneo.vim
"let g:neocomplcache_enable_at_startup = 1

" Not sure if these are doing anything.
"let g:SuperTabMappingForward = '<C-Space>'
"let g:SuperTabMappingBackward = '<S-C-Space>'

"map <C-Space> <C-x><C-o>
inoremap <Nul> <C-x><C-o>
" Just use <C-t> for tab-indenting
"inoremap <Tab> <C-x><C-o>
"inoremap <C-Space> <C-x><C-o>

" Make sexp behave in deleting both new parens
imap <C-h> <BS>

let g:buffergator_suppress_keymaps = 1
let g:buffergator_display_regime = "bufname"
let g:buffergator_sort_regime = "mru"
let g:buffergator_viewport_split_policy = "L" "left

" CtrlP
"set wildignore+=*/tmp*,*.swp,/vendor
set wildignore+=*/node_modules/*,*/build/*,*/components/*,*/_public/*,*/tmp/*,*/vendor/*,*/log/*
"let g:ctrlp_custom_ignore = '\v[\/]node_modules$'
let g:ctrlp_use_caching = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_max_depth = 6
let g:ctrlp_max_height = 50
let g:ctrlp_switch_buffer = 2
let g:ctrlp_clear_cache_on_exit = 0
"let g:ctrlp_arg_map = 1
"let g:ctrlp_prompt_mappings = {
  "\ 'AcceptSelection("h")': ['<S-i>'],
  "\ }
"let g:ctrlp_open_new_file = 'v'
let g:ctrlp_extensions = ['dir']
" Open *h*orizontally and *j*ump to first win.
let g:ctrlp_open_multiple_files = 'hj'
" Use <C-d> to toggle
"let g:ctrlp_by_filename = 1

" Set root to CWD. Another good option is 'r' for VCS mode.
let g:ctrlp_working_path_mode = 0
"let g:ctrlp_working_path_mode = 'c'
"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']
"let g:ctrlp_user_command = {
  "\ 'types': {
    "\ 1: ['.git', 'cd %s && git ls-files'],
    "\ 2: ['.hg', 'hg --cwd %s locate -I .'],
    "\ },
  "\ 'fallback': 'find %s -type f -maxdepth 6 -xdev'
  "\ }

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
let g:NERDTreeWinSize = 30

" EnhancedCommentify visual bindings:
" http://stackoverflow.com/questions/1676632/whats-a-quick-way-to-comment-uncomment-lines-in-vim
" But not using EnhancedCommentify since NERDCommenter is superior.
"let g:EnhCommentifyUserBindings='Yes'

let g:jasmine_use_templates = ""

let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": ":1.2"}

let syntastic_enable_signs = 1
"let syntastic_auto_jump = 1
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_always_populate_loc_list = 1

" https://github.com/reedes/vim-textobj-quote
let g:textobj#quote#matchit = 1
let g:textobj#quote#educate = 1

" NOTE: remove these mappings if using the tpope/vim-surround plugin!
"map <silent> Sq <Plug>SurroundWithSingle
"map <silent> SQ <Plug>SurroundWithDouble
"map <silent> <leader>qc <Plug>ReplaceWithCurly
"map <silent> <leader>qs <Plug>ReplaceWithStraight
let g:textobj#quote#doubleMotion = 'Q'
let g:textobj#quote#singleMotion = 'q'


"set verbose
" }}}

"== Register Macros {{{
" http://vim.wikia.com/wiki/Macros

" Commify/Uncommify: John Doe -> Doe, John
let @c='dWf:i, pxa'
let @v='dWA phDa'

" first initial, Last name
" John Doe -> jdoe
let @w='ylA: pByw$pBgu$a'

" Full name with underscore: John Doe -> john_doe
let @u='y$A: pBhr_Bgu$a'

"  John Doe -> johnd
let @y='A:0yWA pBByf:ApxBlDXBgu$a'

" John Doe -> doej
let @e='A:  BlDXBgu$a'

" Downcase just the email
let @d='f:gu$a'

" Join
let @j='A:Ja'

" SRM entry
"let @s='/stages:WJJla, [ ]hi "", ""[15~k5BBli'
"let @s='/stages:WJJla, [ ]hi "", ""<F5>BBli'
"let @s='/stages:WJJla, [ ]hi "", ""'
let @s='/stages:OW%ok%JJla, ["", "", ""imicahBhhhA ]BBBl'
let @n='/notes:WC[[]]hi"", "", ""imicahBBBlll'
let @a="0f:ll%hi, ['', \"\", '']%ll"

let @l='/address: Wlv$hhy:r !./addr2latlng.coffee """I  geoloc: '
" }}}

"== Map (Leader) {{{

nnoremap <Space> za

" I more often want to go to the space between words, to follow with D
nnoremap gb Bh

" Fast saving
nmap <leader>w :w!<cr>

" Tabular
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
" I suppose `a` is for "align"
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

" eXchange words
" https://github.com/vim-scripts/transpose-words
nmap <Leader>x <Plug>Transposewords

nmap <C-w>o <C-w>_
nmap <C-w><C-o> <C-w>_

nmap <buffer> dl :Conflict2DiffGetLeft<CR>
nmap <buffer> dr :Conflict2DiffGetRight<CR>
nmap <buffer> dq :Conflict2DiffFinish<CR>

if &diff
    colorscheme ron
endif

" Clear the hlsearch.
nmap <leader>z :noh<CR>

" Center the screen by having top marked.
" Could even auto-detect a "top" marker like ";;;"
"nmap <leader>t 'tz^M''

" BufExplorer
"map <Leader>b :BufExplorerHorizontalSplit<CR>

" Trying some auto-surround.
" Really bad when pasting
"inoremap ' ''<Esc>i
"inoremap " ""<Esc>i
"inoremap [ []<Esc>i
"inoremap ( ()<Esc>i
"inoremap < <><Esc>i

" NERDTree
" Explore (using NT)
nmap <Leader>n :NERDTreeToggle<CR>

" Location (errors) window
nmap <Leader>l :lwindow<CR>
nmap <Leader>c :cwindow<CR>
nmap <Leader>C :cclose<CR>
nmap <Leader>h :helpclose<CR>
"nmap <Leader>e :llist<CR>

" grep
nmap <Leader>g :Ag! 
"let g:ackprg="ack-grep -H --nocolor --nogroup --column"
"set grepprg=ack\ -a

nmap <Leader>s :SyntasticCheck<CR>

nmap <Leader>b :BuffergatorToggle<CR>
" BuffersGatorToggle not working for some reason
nmap <Leader>t :BuffergatorTabsOpen<CR>
nmap <Leader>T :BuffergatorTabsClose<CR>

map <Leader>k <plug>NERDCommenterToggle
"map <Leader>k <plug>NERDCommenterAlignLeft
"map <Leader>K <plug>NERDComUncommentLine
" Defaults, but replacing leading ‘c’ with ‘k’.
"map <leader>kk <plug>NERDCommenterComment
"map <leader>k<space> <plug>NERDCommenterToggle
"map <leader>km <plug>NERDCommenterMinimal
"map <leader>ks <plug>NERDCommenterSexy
"map <leader>ki <plug>NERDCommenterInvert
"map <leader>ky <plug>NERDCommenterYank
"map <leader>kl <plug>NERDCommenterAlignLeft
"map <leader>kb <plug>NERDCommenterAlignBoth
"map <leader>kn <plug>NERDCommenterNest
"map <leader>ku <plug>NERDCommenterUncomment
"map <leader>k$ <plug>NERDCommenterToEOL
"map <leader>kA <plug>NERDCommenterAppend

nmap <S-q> :CtrlPMRU<CR>

nmap <Leader>q <C-W>q

" Toggles for “quickwin”, used by grep, ack, make, etc.
" Might not use this much.
"map <Leader>q :cclose<CR>
"map <Leader>Q :copen<CR>

"map <Leader>t :TlistToggle<CR>

" UniCycle typography
map <Leader>u :UniCycleToggle<CR>

" vimmerge/Git mergetool
" http://blog.binchen.org/posts/use-vimdiff-to-resolve-git-merge-conflicts-effectively.html
map <silent> <leader>d2 :diffget 2<CR> :diffupdate<CR>
map <silent> <leader>d3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>d4 :diffget 4<CR> :diffupdate<CR>

" }}}

"== Window Navigation {{{
map <Leader>1 <C-W>1w
map <Leader>2 <C-W>2w
map <Leader>3 <C-W>3w
map <Leader>4 <C-W>4w
"map <Leader>p <C-W>p

" Resize windows (hmm, arrow keys not working)
nnoremap <C-J> 2<C-W>+
nnoremap <C-K> 2<C-W>-
"nnoremap <C-Left> <C-W>2>
"nnoremap <C-Right> <C-W>2<

" Start new tab with Explorer.
"nmap <C-N> :tabnew<C-M><leader>f
"nmap <C-N> :tabnew<C-M><Leader>e
nmap <C-N> :10tab tabnew<C-M>

inoremap <C-l> <C-x><C-l>
inoremap <C-f> <C-x><C-f>
" }}}

"== Abbreviation {{{
"iabbr :) ☻
iabbr (c) ©

"iabbr js JavaScript
"iabbr ls LiveScript
" }}}

"== Autocmd {{{
" au! " remove existing auto-commands to avoid double-sourcing
if has("autocmd")
" Use the skeletons
au BufNewFile *.cpp,*.C,*.cxx,*.cc r ~/.vim/skel/skel.cpp | source ~/.vim/skel/skel.cpp.sh
au BufNewFile *.c read ~/.vim/skel/skel.c | source ~/.vim/skel/skel.c.sh
au BufNewFile *.h read ~/.vim/skel/skel.h | source ~/.vim/skel/skel.h.sh
au BufNewFile *.py  0read ~/.vim/skel/skel.py
au BufNewFile *.rb  0read ~/.vim/skel/skel.rb
au BufNewFile *.rkt  0read ~/.vim/skel/skel.rkt
au BufNewFile *.coffee,*.cf,*.co,*.cs  0read ~/.vim/skel/skel.coffee
au BufNewFile *.ls  0read ~/.vim/skel/skel.ls
au BufNewFile *.zsh,*.z  0read ~/.vim/skel/skel.zsh
au BufNewFile makefile read ~/.vim/skel/skel.mk | source ~/.vim/skel/skel.mk.sh
au BufNewFile *.docbook,*.docbk,*.db 0r ~/.vim/skel/skel.docbook
au BufNewFile *.html 0r ~/.vim/skel/skel.html
au BufNewFile *.jade 0r ~/.vim/skel/skel.jade
au BufNewFile *.asc 0r ~/.vim/skel/skel.asc

" Smart punctuation/typography/unicode curly apostrophes/quotes
augroup textobj_quote
  autocmd!
  autocmd FileType markdown,textile,text,asciidoc,haml call textobj#quote#init()
  "autocmd FileType text call textobj#quote#init({'educate': 0})
augroup END

endif " if has("autocmd")

"au BufNewFile *.ans 0read /home/mde/proj/Membean/provn/ansible/skel/skel.ans | echo 'seeing new ans file' | sleep 1

set previewheight=50
au BufEnter ?* call PreviewHeightWorkAround()
func! PreviewHeightWorkAround()
    if &previewwindow
        exec 'setlocal winheight='.&previewheight
    endif
endfunc
" }}}

"== Tab Navigation {{{
" Tabbing like Firefox, xterm only.
map <M-1> 1gt
map <M-2> 2gt
map <M-3> 3gt
map <M-4> 4gt
map <M-5> 5gt
map <M-6> 6gt
map <M-7> 7gt
map <M-8> 8gt
map <M-9> 9gt
" Tabbing, for rxvt-unicode/urxvt for alt/meta recognition
nmap 1 1gt
nmap 2 2gt
nmap 3 3gt
nmap 4 4gt
nmap 5 5gt
nmap 6 6gt
nmap 7 7gt
nmap 8 8gt
nmap 9 9gt
