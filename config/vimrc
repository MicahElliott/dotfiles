"-----------------------------------------------------------------------
" .vimrc
" Maintainer:  Micah Elliott
" Version:     0.3
" Info:        Micah’s main config file
"-----------------------------------------------------------------------

"echo "in vimrc" | sleep 1

" Some info on getting python support for arch linux:
" https://gist.github.com/3048622

set t_Co=256
if &t_Co > 2                " check for multi colors
    syntax on                    " colored syntax
endif

"-- Options ------------------------------------------------------------
set exrc          " use local .exrc file
set autowrite     " autosave before changing window or shellcmd
set ignorecase  " search case sensitive
set tabstop=2     " tab 4 chars (ts)
set shiftwidth=2  " autoindent to 4 chars
set expandtab
set nobackup
set bs=2          " allow backspacing in insert mode
set nocompatible  " not compatible with vi
set history=50    " keeps command history
set ruler         " show cursor position always
set showmode
set showcmd
set showmatch     " match parens, brackets in insert mode
set hlsearch      " search pattern highlighting
set mousehide     " hide mouse pointer while typing
set errorbells    " turn on bells
set visualbell    " some kind of visual bell warning
set modeline      " enable .exrc cmds inside file being edited
set modelines=5   " number of lines at top to be checked
set formatoptions=tcrq
                  " r is non-default but important! (:h fo-table)
set nocursorline
set nocursorcolumn
set hidden
set autoindent    " Mimic previous line
set incsearch     " Show found string as it's being typed
set nojoinspaces    " I prefer that *one* space is inserted upon `join' (j)
set nolinebreak   " Wrap long lines (breakat) -- do not insert <EOL>s
                  "   only affects the way the file is displayed
set nosmartindent " Too smart for text
set nosmarttab    " Too smart for text
set textwidth=78  " Insert <EOL> when reaching this column
set wrap          " Display long lines wrapped
set wrapmargin=0  " Like `textwidth' but use instead (from right border)
set suffixes=.bak,~,.o,.info,.swp,.swp,.pc,.pcl,.aux,.dvi,.log,.toc
set hidden
"set relativenumber
set colorcolumn=80

" Always show a status bar
set laststatus=2

" Enable mouse-clicking/viz-highlighting, but mouse-copy only in insert mode.
" Disabling since painful to have to go to insert mode to mouse-select.
"set mouse=n

" Get out of insert-mode without (perceived) delay
" http://ksjoberg.com/vim-esckeys.html
set noesckeys

" Interesting shortcut hacks for Esc
imap kj <Esc>
imap jk <Esc>

" Seems these all need to be in vimrc due to order of vimclojure.
let vimfiles = $HOME . "/.vim"
"let vimclojure#SetupKeyMap = 0
let vimfiles = $HOME . "/.vim"
let vimclojure#HighlightBuiltins = 1      " Highlight Clojure's builtins
let vimclojure#ParenRainbow = 1           " Rainbow parentheses'!
let vimclojure#SplitSize = 10
let vimclojure#SplitPos = "bottom"
let vimclojureRoot = vimfiles."/bundle/VimClojure"
let vimclojure#HighlightContrib = 1
let vimclojure#DynamicHighlighting = 1
let vimclojure#FuzzyIndent = 1
"let vimclojure#WantNailgun = 1
"let vimclojure#NailgunClient = vimclojureRoot."/lib/nailgun/ng"
" Java? http://blog.darevay.com/2010/10/how-i-tamed-vimclojure/

let mapleader = ","
let maplocalleader = ","
                  " ignore command-line completion
"set term=linux   " override shell's setting--should work everywhere
"set tags=$VIMTAGS
set tags=./tags,./TAGS,tags,TAGS,./tmp/tags,../tags

set guicursor=a:blinkwait0,a:block-cursor

" Mitigate annoying delay on Esc:
" http://superuser.com/questions/246540/vim-delay-when-exiting-visual-mode
set timeoutlen=600 " ms
" http://vim.wikia.com/wiki/Configuring_the_cursor
" Only xterm supports underscore & blinking
if &term =~ "xterm\\|rxvt"
  " use an orange cursor in insert mode
  let &t_SI = "\<Esc>]12;white\x7"
  " use a red cursor otherwise
  let &t_EI = "\<Esc>]12;red\x7"
  " reset cursor when vim exits
  autocmd VimLeave * silent !echo -ne "\033]112\007"
endif

setlocal spell spelllang=en_us
set nospell
set spellfile=~/.vim/en.utf-8.add

"-- GUI (instead of having a gvimrc) -----------------------------------
"set guifont=Monospace\ 6
set guifont=ProFontWindows\ 9
"set guifont=mde
set guioptions=acegi


"-- Pathogen ---------------------------------------------------------
"filetype off
""call pathogen#runtime_append_all_bundles()
"call pathogen#infect('~/gitcontainer/vim')
"" For testing my hacks.
""call pathogen#runtime_prepend_subdirectories('~/gitcontainer/forks')
"filetype plugin indent on

filetype off  " required for vundle!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle; required!
Bundle 'gmarik/vundle'

" My Bundles here:
" Examples for:
" original repos on github
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" vim-scripts repos
"Bundle 'FuzzyFinder'
" non github repos
"Bundle 'git://git.wincent.com/command-t.git'

Bundle 'tyok/ack.vim.git'
Bundle 'vim-scripts/Color-Sampler-Pack'
Bundle 'sjl/badwolf.git'
Bundle 'nanotech/jellybeans.vim.git'
Bundle 'altercation/vim-colors-solarized'
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-cucumber.git'
Bundle 'tpope/vim-haml.git'
Bundle 'trapd00r/irc.vim.git'
Bundle 'claco/jasmine.vim.git'
Bundle 'tpope/vim-markdown.git'
Bundle 'juvenn/mustache.vim.git'
Bundle 'Shougo/neocomplcache.git'
Bundle 'scrooloose/nerdcommenter.git'
Bundle 'scrooloose/nerdtree.git'
Bundle 'tpope/vim-pathogen.git'
Bundle 'tpope/vim-rails'
Bundle 'vim-scripts/Rainbow-Parenthesis.git'
Bundle 'tpope/vim-repeat.git'
Bundle 'vim-scripts/rubycomplete.vim'
Bundle 'vim-ruby/vim-ruby.git'
Bundle 'ervandew/screen'
Bundle 'bbommarito/vim-slim.git'
Bundle 'msanders/snipmate.vim.git'
Bundle 'ervandew/supertab.git'
Bundle 'tpope/vim-surround.git'
Bundle 'scrooloose/syntastic.git'
Bundle 'vim-scripts/taglist.vim.git'
Bundle 'tomtom/tlib_vim.git'
Bundle 'vim-scripts/transpose-words.git'
Bundle 'tpope/vim-unimpaired.git'
Bundle 'MarcWeber/vim-addon-mw-utils.git'
Bundle 'jeetsukumaran/vim-buffergator.git'
Bundle 'vim-scripts/VimClojure.git'
Bundle 'kchmck/vim-coffee-script.git'
Bundle 'rson/vim-conque.git'
Bundle 'henrik/vim-indexed-search.git'
Bundle 'vim-scripts/vim-json-bundle.git'
Bundle 'tpope/vim-liquid.git'
Bundle 'MicahElliott/vim-powerline.git'
Bundle 'vim-ruby/vim-ruby.git'
Bundle 'jpalardy/vim-slime.git'

Bundle 'git@github.com:MicahElliott/snipmate-snippets.git'
Bundle 'git@github.com:MicahElliott/UniCycle.git'
Bundle 'git@gist.github.com:3049202.git'
Bundle 'git@gist.github.com:720355.git'
Bundle 'git@gist.github.com:735852.git'

filetype plugin indent on     " required!

"-- ftplugins ~/.vim/ftplugin ----------------------------------------
" This vimrc runs before the ftplugins.
" See individual files with: <C-w>f
" Particularly interesting:
" ~/.vim/ftplugin/ruby.vim
" ~/.vim/ftplugin/clojure.vim
" ~/.vim/ftplugin/python/mde.vim
" ~/.vim/ftplugin/bash.vim
" ~/.vim/ftplugin/coffee.vim
" ~/.vim/ftplugin/cpp.vim
" ~/.vim/ftplugin/css.vim
" ~/.vim/ftplugin/c.vim
" ~/.vim/ftplugin/mail.vim
" ~/.vim/ftplugin/make.vim
" ~/.vim/ftplugin/markdown.vim
" ~/.vim/ftplugin/python
" ~/.vim/ftplugin/r/r-mde.vim
" ~/.vim/ftplugin/ruby.vim
" ~/.vim/ftplugin/sass.vim
" ~/.vim/ftplugin/sh.vim
" ~/.vim/ftplugin/text.vim
" ~/.vim/ftplugin/zsh.vim

"-- Override settings ------------------------------------------------

"let g:snippets_dir = '~/.vim/snippets'
"inoremap <C-j> <C-r>=TriggerSnippet()<CR>
"snoremap <C-j> <Esc>i<Right><C-r>=TriggerSnippet()<CR>

" Stupid unicycle somehow breaks FuzzyFinder by mistreating - and .
" So be sure to toggle it off before invoking FuzzyFinder!
"let g:unicycle_on = 1

" See: ~/.vim/plugin/mdeneo.vim
let g:neocomplcache_enable_at_startup = 1

" Not sure if these are doing anything.
let g:SuperTabMappingForward = '<C-Space>'
let g:SuperTabMappingBackward = '<S-C-Space>'

let g:buffergator_display_regime = "bufname"
let g:buffergator_sort_regime = "mru"
let g:buffergator_viewport_split_policy = "L" "left

" CtrlP
"set wildignore+=*/tmp*,*.swp,/vendor
let g:ctrlp_use_caching = 1
let g:ctrlp_dotfiles = 1
let g:ctrlp_max_depth = 6
"let g:ctrlp_working_path_mode = 1
let g:ctrlp_max_height = 50
let g:ctrlp_switch_buffer = 2
let g:ctrlp_clear_cache_on_exit = 0
"let g:ctrlp_arg_map = 1
"let g:ctrlp_prompt_mappings = {
  "\ 'AcceptSelection("h")': ['<S-i>'],
  "\ }
"let g:ctrlp_open_new_file = 'v'
let g:ctrlp_extensions = ['dir']
" Open *h*orizontally and *j*ump to first win.
let g:ctrlp_open_multiple_files = 'hj'
" Use <C-d> to toggle
let g:ctrlp_by_filename = 1

"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
  \ 'fallback': 'find %s -type f -maxdepth 6 -xdev'
  \ }

" NERDCommenter
let g:NERDCreateDefaultMappings = 0

" EnhancedCommentify visual bindings:
" http://stackoverflow.com/questions/1676632/whats-a-quick-way-to-comment-uncomment-lines-in-vim
" But not using EnhancedCommentify since NERDCommenter is superior.
"let g:EnhCommentifyUserBindings='Yes'

let g:jasmine_use_templates = ""

let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"

let syntastic_enable_signs = 1
let syntastic_auto_jump = 1

"set verbose

"-- Color Schemes ----------------------------------------------------
" Listed in order of preference.
"colorscheme adobe
"colorscheme herald
"colorscheme inkpot
" No effect for cterm
"let g:molokai_original = 1
colorscheme molokai
"colorscheme badwolf
"colorscheme jellybeans
"colorscheme vibrantink
"colorscheme vividchalk
"colorscheme desert256
"colorscheme motus
"set background=light
"let g:solarized_termcolors=256
"let g:solarized_contrast="high"
"colorscheme solarized
"se background=dark
colorscheme comments
colorscheme missing
colorscheme overrides

"let Powerline_colorscheme = 'skwp'
let Powerline_symbols = 'unicode'

" Has no effect.
"source ~/.vim/ftplugin/comments.vim

" Catching bad whitespace.
"hi ExtraWhitespace ctermbg=9 guibg=red
match ExtraWhitespace /\s\+$/


"-- Map (Leader) -------------------------------------------------------

" eXchange words
" https://github.com/vim-scripts/transpose-words
nmap <Leader>x <Plug>Transposewords

nmap <C-w>o <C-w>_

nmap <buffer> dl :Conflict2DiffGetLeft<CR>
nmap <buffer> dr :Conflict2DiffGetRight<CR>
nmap <buffer> dq :Conflict2DiffFinish<CR>

" Clear the hlsearch.
nmap <leader>z :noh<CR>

" Center the screen by having top marked.
" Could even auto-detect a "top" marker like ";;;"
nmap <leader>t 'tz^M''

" BufExplorer
"map <Leader>b :BufExplorerHorizontalSplit<CR>

" NERDTree
" Explore (using NT)
nmap <Leader>n :NERDTreeToggle<CR>
nmap <Leader>e :NERDTreeToggle<CR>

" Ack (grep)
nmap <Leader>g :Ack! 
"let g:ackprg="ack-grep -H --nocolor --nogroup --column"
set grepprg=ack\ -a

nmap <Leader>s :SyntasticCheck<CR>

"nmap <Leader>b :BuffergatorToggle<CR>

map <Leader>k <plug>NERDCommenterToggle
"map <Leader>k <plug>NERDCommenterAlignLeft
"map <Leader>K <plug>NERDComUncommentLine
" Defaults, but replacing leading ‘c’ with ‘k’.
"map <leader>kk <plug>NERDCommenterComment
"map <leader>k<space> <plug>NERDCommenterToggle
"map <leader>km <plug>NERDCommenterMinimal
"map <leader>ks <plug>NERDCommenterSexy
"map <leader>ki <plug>NERDCommenterInvert
"map <leader>ky <plug>NERDCommenterYank
"map <leader>kl <plug>NERDCommenterAlignLeft
"map <leader>kb <plug>NERDCommenterAlignBoth
"map <leader>kn <plug>NERDCommenterNest
"map <leader>ku <plug>NERDCommenterUncomment
"map <leader>k$ <plug>NERDCommenterToEOL
"map <leader>kA <plug>NERDCommenterAppend

nmap <S-q> :CtrlPMRU<CR>

nmap <Leader>q <C-W>q

" Toggles for “quickwin”, used by grep, ack, make, etc.
" Might not use this much.
"map <Leader>q :cclose<CR>
"map <Leader>Q :copen<CR>

"map <Leader>t :TlistToggle<CR>

" UniCycle typography
map <Leader>u :UniCycleToggle<CR>


"-- Window Navigation --------------------------------------------

map <Leader>1 <C-W>1w
map <Leader>2 <C-W>2w
map <Leader>3 <C-W>3w
map <Leader>4 <C-W>4w
"map <Leader>p <C-W>p

" Start new tab with Explorer.
"nmap <C-N> :tabnew<C-M><leader>f
"nmap <C-N> :tabnew<C-M><Leader>e
nmap <C-N> :10tab tabnew<C-M>



"-- Abbreviation -------------------------------------------------------
"iabbr :) ☻
iabbr (c) ©


"-- Autocmd ------------------------------------------------------------
" au! " remove existing auto-commands to avoid double-sourcing
if has("autocmd")
" Use the skeletons
au BufNewFile *.cpp,*.C,*.cxx,*.cc r ~/.vim/skel/skel.cpp | source ~/.vim/skel/skel.cpp.sh
au BufNewFile *.c read ~/.vim/skel/skel.c | source ~/.vim/skel/skel.c.sh
au BufNewFile *.h read ~/.vim/skel/skel.h | source ~/.vim/skel/skel.h.sh
au BufNewFile *.py  0read ~/.vim/skel/skel.py
au BufNewFile *.rb  0read ~/.vim/skel/skel.rb
au BufNewFile *.zsh  0read ~/.vim/skel/skel.zsh
au BufNewFile makefile read ~/.vim/skel/skel.mk | source ~/.vim/skel/skel.mk.sh
au BufNewFile *.docbook,*.docbk,*.db 0r ~/.vim/skel/skel.docbook
au BufNewFile *.html 0r ~/.vim/skel/skel.html
endif " if has("autocmd")


set previewheight=50
au BufEnter ?* call PreviewHeightWorkAround()
func! PreviewHeightWorkAround()
    if &previewwindow
        exec 'setlocal winheight='.&previewheight
    endif
endfunc

"-- Tab Navigation --------------------------------------------
" Tabbing like Firefox, xterm only.
map <M-1> 1gt
map <M-2> 2gt
map <M-3> 3gt
map <M-4> 4gt
map <M-5> 5gt
map <M-6> 6gt
map <M-7> 7gt
map <M-8> 8gt
map <M-9> 9gt
" Tabbing, for rxvt-unicode/urxvt for alt/meta recognition
nmap 1 1gt
nmap 2 2gt
nmap 3 3gt
nmap 4 4gt
nmap 5 5gt
nmap 6 6gt
nmap 7 7gt
nmap 8 8gt
nmap 9 9gt

"###################################
" Return to previously visited tab (<alt><tab>).
" http://vim.1045645.n5.nabble.com/jump-to-last-visited-tabpage-td1172955.html
nmap <Tab> :exe "tabn " . g:ltv<CR>
" referred to by TabLeave autocmd.
function! Setlasttabpagevisited()
  let g:ltv = tabpagenr()
endfunction
augroup localtl
" Remove all localtl autocommands
au!
" keep tally of the last tab page visited.
autocmd TabLeave * call Setlasttabpagevisited()
augroup END
autocmd VimEnter * let g:ltv = 1
"##################################

"-- Misc -------------------------------------------------------------

" Right next to <S-Insert> (the actual xterm paste sequence.
set pastetoggle=<S-Home>

" This seems horrible, but since filetype.vim is looked at *after*
" system syntax file, there's no other place to set it for sh/zsh.
" Sure hope it doesn't affect anything else.
let b:is_bash = 1

"-- Obscure overrides of Vim builtins --------------------------------

"se lines=12
" http://www.shallowsky.com/linux/noaltscreen.html
" Make vim not clear screen on exit.
set t_ti= t_te=
" vimpager stuff: https://github.com/rkitover/vimpager/
" not sure what these really do
let vimpager_disable_x11 = 1
let vimpager_scrolloff = 5

" Two ways to address inotify problems. See vim docs to understand their
" repercussions, which AFAICT are none.
"se backupcopy=yes
set nowritebackup

" No effect this early in load cycle, so has to go individually in all
" the ftplugin files that want to use it. :(
"echo "doing rainbow" | sleep 1
"source ~/.vim/bundle/Rainbow-Parenthesis/syntax/RainbowParenthsis.vim
