# Zsh-specific options and params setup.
# See zshoptions for setopt stuff.
# See zshparam for envars that affect environment.
# Note that vars like CDPATH/cdpath, PATH/pathstay in sync when you edit
# just one. Lower-cased is the convenient array form.


######################################################################
### Params (need to come before autoload stuff)

# Search path for function defs; add mine here.
# System completions live in:
#   /usr/share/zsh/functions/Completion/Unix/
# so have a local personal dir similar.
#fpath=( $fpath ~/config/shell/funcs )
# My funcs.
fpath+=( ~/config/shell/zsh/functions )
# My prompts.
fpath+=( ~/config/shell/zsh/prompts )
# Contrib funcs.
fpath+=( ~/contrib/zsh/functions )
# Necessary?
#fpath+=( ~/config/shell/ )

# Funny stuff like this might be necessary for activating new funcs:
##local f
##f=(~/exp/zsh/fun/*(.))
##unfunction $f:t 2> /dev/null
##autoload -U $f:t
##compinit

source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Stupid pip has to be different; using the old zshcompctl completion system.
# Generated by ‘pip completion --zsh’
# pip zsh completion start
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" COMP_CWORD=$(( cword-1 )) PIP_AUTO_COMPLETE=1 $words[1] ) )
}
compctl -K _pip_completion pip
# pip zsh completion end


# This is awesome! Tab-completion works to expand these!
# Needs to only include dirs that don’t have lots of subdirs.
# Test the reach of this with ‘mkdir foo; cd foo; cd <tab>; rmdir foo’
cdpath=( ~/proj/Membean ~/proj /media/LACIE
         ~/gitcontainer/collections/reference ~/gitcontainer/gists ~/config
         ~/clients )
# cd-able locations. Also awesome. Going with convention of 'd' prefix
# to later enable some completion of "cd d«tab»" to expand only cdables,
# since presently there's no reasonable way for zsh to know which of so
# many envars to expand.
dz=~/proj/cliguy/zsh/zshcasts
dsg=~/clients/huawei/dev/eBento2-ServicesGateway-testg
dsrc=~/archive/src

# Doesn't seem to work for vi-movement.
#WORDCHARS

######################################################################
### Funky stuff -- not exactly options/params

# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/mde/.zshrc'

autoload -Uz compinit; compinit
# End of lines added by compinstall

# Help system. See zshcontrib(1) for instructions.
unalias run-help
autoload run-help

# Prompt.
setopt promptsubst
autoload -Uz promptinit; promptinit
autoload -Uz vcs_info; vcs_info
autoload -Uz colors; colors
#prompt walters red
#prompt pws
#prompt bart
#prompt mde
# Set prompt to random color.
#prompt balance $(( $RANDOM % 9 ))
prompt balance black
#prompt off

# My funcs.
autoload v foofunc

# Mime types; enable massive set of "alias -s" (MAYBE SLOW)
#autoload -U zsh-mime-setup; zsh-mime-setup

# Set vi mode.
bindkey -v
# Not necesssary and not recommended (according to zshoptions);
# might also be getting settings from inputrc.
#setopt vi
# Workaround for funny Ubuntu setting.
bindkey '\e/' vi-history-search-backward

# zsh-specific command finder
# Two bugs!
# https://bugs.launchpad.net/ubuntu/+source/command-not-found/+bug/624565
#. /etc/zsh_command_not_found

# Make vim ignore non-text files.
zstyle ':completion:*:*:vim:*' ignored-patterns '*.(o|so|mp3|MP3)'

# Do menu-driven completion.
zstyle ':completion:*' menu select

# Color completion for some things.
# http://linuxshellaccount.blogspot.com/2008/12/color-completion-using-zsh-modules-on.html
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# http://www.masterzen.fr/category/system-administration/zsh-system-administration/
#zstyle ':completion:*' group-name ''
# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format "$fg[yellow]%B--- %d%b"
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format "$fg[red]No matches for:$reset_color %d"
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''


######################################################################
### Options

setopt interactivecomments
# Don't exit on ^D
setopt ignoreeof

# Changing dirs.
setopt cdablevars pushdignoredups pushdsilent chaselinks

# Enable ~ ^ # in glob patterns.
setopt extendedglob

# Too many scripts use globals or forget to make local.
#setopt warncreateglobal

# Report on bg jobs immediately when they finish.
setopt notify

# History
setopt appendhistory banghist histignorealldups histfindnodups
setopt histignorespace histnostore histreduceblanks histsavenodups
setopt incappendhistory extendedhistory

setopt nocaseglob
setopt correct

# Kinda cool, but eventually annoying to have all shells share hist in
# real-time. Better to just use "fc -RI" to Read Incrementallly the
# missing shared entries.
#setopt sharehistory

# Nice safety, Was just too annoying to have to hit <enter> after !$
#setopt histverify

# Neat! Can say "subdir/myutil" to invoke myutil.
setopt pathdirs

# Enable char ranges in brace expansions: for c in {a-z}; do ...
setopt braceccl

# Don’t overwrite existing files.
setopt noclobber

# Fancy regexes in =~
setopt rematchpcre

# Enable some nice things to go into post-prompt commands.
typeset -ga preexec_functions
typeset -ga precmd_functions

# Bail out of scripts as soon as the first error hits.
#setopt errexit

# Zsh-specific envar overrides for history control. Behave more like
# options than envars.
# http://zsh.sourceforge.net/FAQ/zshfaq03.html#l38
SAVEHIST=10000
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000

# Consider MIME filetype enabling. SLOW!
# http://www.bash2zsh.com/essays/essay1_file_manager.html
#autoload -U zsh-mime-setup; zsh-mime-setup

umask 002

# Modal cursor color for vi's insert/normal modes.
# https://bbs.archlinux.org/viewtopic.php?id=95078
zle-keymap-select () {
  if [ $KEYMAP = vicmd ]; then
    echo -ne "\033]12;Red\007"
  else
    echo -ne "\033]12;Grey\007"
  fi
}
zle -N zle-keymap-select
zle-line-init () {
  zle -K viins
  echo -ne "\033]12;Grey\007"
}
zle -N zle-line-init
