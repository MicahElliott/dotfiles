#!/bin/bash
########################################################################
# versatile(): prompt template 
# 
#   accepts color arg of colors:
#	  red, green, brown, blue, purple, cyan
# 
########################################################################

versatile()
{
unset PROMPT_COMMAND

# List of colors to choose from and plug into template
local gray="\[\033[1;30m\]"
local light_gray="\[\033[0;37m\]"
local white="\[\033[1;37m\]"

local red="\[\033[0;31m\]"
local light_red="\[\033[1;31m\]"
local green="\[\033[0;32m\]"
local light_green="\[\033[1;32m\]"
local brown="\[\033[0;33m\]"
local light_brown="\[\033[1;33m\]"
local blue="\[\033[0;34m\]"
local light_blue="\[\033[1;34m\]"
local purple="\[\033[0;35m\]"
local light_purple="\[\033[1;35m\]"
local cyan="\[\033[0;36m\]"
local light_cyan="\[\033[1;36m\]"

local end="\[\033[0m\]"

local c1 c2 c3 c4 c5 c6

case $1 in 
	red1)    c3="$red";          c4="$light_red"    c6="$blue";;
	red)     c3="$light_red";    c4="$red"          c6="$blue";;
	green1)  c3="$green";        c4="$light_green"  c6="$purple";;
	green)   c3="$light_green";  c4="$green"        c6="$purple";;
	brown1)  c3="$brown";        c4="$light_brown"  c6="$cyan";;
	brown)   c3="$light_brown";  c4="$brown"        c6="$cyan";;
	blue1)   c3="$blue";         c4="$light_blue"   c6="$red";;
	blue)    c3="$light_blue";   c4="$blue"         c6="$red";;
	purple1) c3="$purple";       c4="$light_purple" c6="$green";;
	purple)  c3="$light_purple"; c4="$purple"       c6="$green";;
	cyan1)   c3="$cyan";         c4="$light_cyan"   c6="$brown";;
	cyan)    c3="$light_cyan";   c4="$cyan"         c6="$brown";;
	*)       echo "versatile (prompt setter): Invalid usage"; return; ;;
esac

# Generic Scheme to choose colors above
local c1="$gray"
local c5="$c3"
local c6="$white"

if [ -n "$2" ]; then
    local TITLEBAR="\[\033]0;$2\007\]"
else
    case $TERM in
        xterm*|linux)
            local TITLEBAR='\[\033]0;\u@\h:\w\007\]' ;;
        *)
            local TITLEBAR="" ;;
    esac
fi

# Borrowing status idea from here: http://pastie.org/325104

get_star() {
    status=$(git status 2>/dev/null)
    echo "$status" |grep -q 'Changed but not updated' && {
        echo -en "\033[0;31m*\033[0m" # red
    }
    echo "$status" |grep -q 'Untracked files' && {
        echo -en "\033[1;33m*\033[0m" # purple
    }
    echo "$status" |grep -q 'Changes to be committed:' && {
        echo -en "\033[0;32m*\033[0m" # green
    }
}

# BUG: somewhere around `date` call is a bug causing vi-mode search to
# break and wrap lines.

#$red\$(git status 2>/dev/null |grep -q 'added to commit' && echo '*')\
#$c3!\!$c1:$c5\

# Template for PS1
PS1="$TITLEBAR\
$c1-$c4(\
$red\$(es=\$?; test \$es == 0 || echo 'E'\$es' ')\
$c3\u$c1@$c6\h$c1:$c3\w\
${blue}\$(__git_ps1 ' (%s)')$c1\
\$(get_star)\
$c4)$c1-\
$end\n\
$c1-$c4(\
${c3}t\$(date '+%H%M')$c1\
$c1:\
${c3}j\j$c1:\
$c5\$\
$c4)$c1-$end "

PS2="$c1-$end "

}
